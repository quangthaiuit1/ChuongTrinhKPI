package trong.lixco.com.ejb.service;

import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import trong.lixco.com.jpa.entity.City;
import trong.lixco.com.jpa.entity.ContractType;

@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class ContractTypeService extends AbstractService<ContractType> {
@Inject
	private EntityManager em;
	@Resource
	private SessionContext ct;
	
	@Override
	protected EntityManager getEntityManager() {
		return em;
	}
	
	@Override
	protected SessionContext getUt() {
		return ct;
	}
	
	@Override
	protected Class<ContractType> getEntityClass() {
		return ContractType.class;
	}
	public ContractType findByCode(String code) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ContractType> cq = cb.createQuery(ContractType.class);
		Root<ContractType> root = cq.from(ContractType.class);
		cq.select(root).where(cb.equal(root.get("code"), code));
		TypedQuery<ContractType> query = em.createQuery(cq);
		List<ContractType> results = query.getResultList();
		if (results.size() != 0) {
			return results.get(0);
		} else {
			return null;
		}
	}
}
