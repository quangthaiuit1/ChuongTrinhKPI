package trong.lixco.com.ejb.servicekpi;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import trong.lixco.com.ejb.service.AbstractService;
import trong.lixco.com.jpa.entity.Department;
import trong.lixco.com.jpa.entity.DepartmentParent;
import trong.lixco.com.jpa.entitykpi.OrientationPerson;
import trong.lixco.com.jpa.entitykpi.PositionJob;

@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class OrientationPersonService extends AbstractService<OrientationPerson> {
	@Inject
	private EntityManager em;
	@Resource
	private SessionContext ct;

	@Override
	protected EntityManager getEntityManager() {
		return em;
	}

	@Override
	protected SessionContext getUt() {
		return ct;
	}

	@Override
	protected Class<OrientationPerson> getEntityClass() {
		return OrientationPerson.class;
	}

	public List<OrientationPerson> findSearch(DepartmentParent department, PositionJob positionJob) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<OrientationPerson> cq = cb.createQuery(OrientationPerson.class);
		List<Predicate> predicates = new LinkedList<Predicate>();
		Root<OrientationPerson> root = cq.from(OrientationPerson.class);
		if (department != null) {
			predicates.add(cb.equal(root.get("positionJob").get("departmentParent"), department));
			if (positionJob != null)
				predicates.add(cb.equal(root.get("positionJob"), positionJob));
		}
		cq.select(root)
				.where(cb.and(predicates.toArray(new Predicate[0])))
				.orderBy(cb.asc(root.get("positionJob").get("departmentParent")),
						cb.asc(root.get("positionJob").get("name")),
						cb.asc(root.get("code")));
		TypedQuery<OrientationPerson> query = em.createQuery(cq);
		List<OrientationPerson> results = query.getResultList();
		return results;
	}
}
