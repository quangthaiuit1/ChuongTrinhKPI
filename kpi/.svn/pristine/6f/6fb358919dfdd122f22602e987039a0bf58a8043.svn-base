package trong.lixco.com.beankpi;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import org.jboss.logging.Logger;
import org.joda.time.LocalDate;
import org.omnifaces.cdi.ViewScoped;
import org.primefaces.context.RequestContext;

import trong.lixco.com.bean.AbstractBean;
import trong.lixco.com.ejb.service.DepartmentParentService;
import trong.lixco.com.ejb.service.EmployeeService;
import trong.lixco.com.ejb.servicekpi.DepartmentMeetingService;
import trong.lixco.com.jpa.entity.DepartmentParent;
import trong.lixco.com.jpa.entity.Employee;
import trong.lixco.com.jpa.entitykpi.DepartmentMeeting;
import trong.lixco.com.nhansu.general.ApplicationBean;
import trong.lixco.com.util.Notify;

@Named
@ViewScoped
// KPI cong ty
public class DepartmentMeetingBean extends AbstractBean<DepartmentMeeting> {
	private static final long serialVersionUID = 1L;
	private SimpleDateFormat sf;
	private Notify notify;
	private List<DepartmentMeeting> departmentMeetings;

	private DepartmentMeeting departmentMeeting;
	private DepartmentMeeting departmentMeetingEdit;
	private List<DepartmentParent> departmentParents;

	private int yearS;
	private DepartmentParent departmentParentS;

	@Inject
	private EmployeeService employeeService;
	@Inject
	private DepartmentParentService departmentParentService;
	@Inject
	private DepartmentMeetingService departmentMeetingService;
	@Inject
	private Logger logger;

	@Override
	protected Logger getLogger() {
		return logger;
	}

	// private JasperPrint jasperPrint;
	// public void printOnly() {
	// notify = new Notify(FacesContext.getCurrentInstance());
	// try {
	// String pathre = "/resources/reports/kpis/DepartmentMeeting.jasper";
	// String reportPath = null;
	// Map<String, Object> importParam = null;
	// importParam = installConfigPersonReport();
	// List<ParamReportDetail> paramnhaps = paramReportDetailService
	// .findByParamReports_param_name("kpiphongthang");
	// for (ParamReportDetail pd : paramnhaps) {
	// importParam.put(pd.getKey(), pd.getValue());
	// }
	// reportPath =
	// FacesContext.getCurrentInstance().getExternalContext().getRealPath(pathre);
	// importParam.put("REPORT_LOCALE", new Locale("vi", "VN"));
	//
	// List<PrintKPIComp> printKPIComps = new ArrayList<PrintKPIComp>();
	// SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
	// for (int i = 0; i < KPIDepOfMonths.size(); i++) {
	// PrintKPIComp pr = new PrintKPIComp(KPIDepOfMonths.get(i), sf);
	// printKPIComps.add(pr);
	// }
	//
	// printKPIComps.sort(Comparator.comparing(PrintKPIComp::getNo));
	// JRDataSource beanDataSource = new
	// JRBeanCollectionDataSource(printKPIComps);
	// jasperPrint = JasperFillManager.fillReport(reportPath, importParam,
	// beanDataSource);
	// data = JasperExportManager.exportReportToPdf(jasperPrint);
	// mediaDepartmentMeetingBean.setData(data);
	// RequestContext context = RequestContext.getCurrentInstance();
	// context.execute("PF('showpdfreport').show();");
	// } catch (Exception e) {
	// e.printStackTrace();
	// }
	// }

	// @Inject
	// MediaDepartmentMeetingBean mediaDepartmentMeetingBean;
	// byte[] data;
	// @Inject
	// private ApplicationBean applicationBean;
	//
	// public StreamedContent getMedia() throws IOException {
	// StreamedContent a = mediaDepartmentMeetingBean.getMedia();
	// return a;
	// }

	// public void process(String idp) {
	// if (KPIDepOfMonths.size() != 0) {
	// RequestContext context = RequestContext.getCurrentInstance();
	// context.execute("document.getElementById('" + idp + "').click();");
	// } else {
	// // Khong co du lieu
	// RequestContext context = RequestContext.getCurrentInstance();
	// context.execute("PF('thongbao').show();");
	// }
	// }

	@Override
	public void initItem() {
		sf = new SimpleDateFormat("dd/MM/yyyy");
		reset();
	}

	public void createOrUpdate() {
		notify = new Notify(FacesContext.getCurrentInstance());
		LocalDate lc = new LocalDate();
		Date date = lc.withWeekOfWeekyear(departmentMeeting.getWeek()).withYear(departmentMeeting.getYear())
				.dayOfWeek().withMinimumValue().toDate();
		if (departmentMeeting.getId() == null) {
			// departmentMeeting.setIsfinal(isfinal);
			List<DepartmentMeeting> kps = departmentMeetingService.findDepartmentMeeting(departmentMeeting.getWeek(),
					departmentMeeting.getYear(), departmentMeeting.getDepartmentParent());
			if (kps.size() == 0) {
				if (allowSave(date)) {
					DepartmentMeeting wf = departmentMeetingService.create(departmentMeeting);
					if (wf != null) {
						searchItem();
						writeLogInfo("Tao moi " + wf.toString());
						notify.success();
					} else {
						notify.error();
					}
				} else {
					notify.warningDetail();
				}
			} else {
				FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Thông báo!",
						"Đã có biên bản họp tuần " + departmentMeeting.getWeek() + " năm "
								+ departmentMeeting.getYear());
				RequestContext.getCurrentInstance().showMessageInDialog(message);
			}
		} else {
			DepartmentMeeting kpiCompOld = departmentMeetingService.findById(departmentMeeting.getId());
			Date date2 = lc.withWeekOfWeekyear(kpiCompOld.getWeek()).withYear(kpiCompOld.getYear()).dayOfWeek()
					.withMinimumValue().toDate();
			if (allowUpdate(date) && allowUpdate(date2)) {
				if (kpiCompOld.getWeek() != departmentMeeting.getWeek()
						|| kpiCompOld.getYear() != departmentMeeting.getYear()) {
					List<DepartmentMeeting> temps = departmentMeetingService.findDepartmentMeeting(
							departmentMeeting.getWeek(), departmentMeeting.getYear(),
							departmentMeeting.getDepartmentParent());
					if (temps.size() != 0) {
						FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Thông báo!",
								"Đã có biên bản họp tuần " + departmentMeeting.getWeek() + " năm "
										+ departmentMeeting.getYear());
						RequestContext.getCurrentInstance().showMessageInDialog(message);
					} else {
						DepartmentMeeting wf = departmentMeetingService.update(departmentMeeting);
						if (wf != null) {
							departmentMeeting = departmentMeetingService.findById(wf.getId());
							writeLogInfo("Cap nhat" + wf.toString());
							searchItem();
							notify.success();
						} else {
							notify.error();
						}
					}
				} else {
					DepartmentMeeting wf = departmentMeetingService.update(departmentMeeting);
					if (wf != null) {
						departmentMeeting = departmentMeetingService.findById(wf.getId());
						searchItem();
						writeLogInfo("Cap nhat" + wf.toString());
						notify.success();
					} else {
						notify.error();
					}
				}
			} else {
				notify.warningDetail();
			}
		}

	}

	public void createOrUpdateEmpl() {
		notify = new Notify(FacesContext.getCurrentInstance());
		LocalDate lc = new LocalDate();
		Date date = lc.withWeekOfWeekyear(departmentMeeting.getWeek()).withYear(departmentMeeting.getYear())
				.dayOfWeek().withMinimumValue().toDate();
		if (departmentMeeting.getId() == null) {
			// departmentMeeting.setIsfinal(isfinal);
			List<DepartmentMeeting> kps = departmentMeetingService.findDepartmentMeeting(departmentMeeting.getWeek(),
					departmentMeeting.getYear(), departmentMeeting.getDepartmentParent());
			if (kps.size() == 0) {
				if (allowSave(date)) {
					DepartmentMeeting wf = departmentMeetingService.create(departmentMeeting);
					if (wf != null) {
						searchItem();
						writeLogInfo("Tao moi " + wf.toString());
						notify.success();
					} else {
						notify.error();
					}
				} else {
					notify.warningDetail();
				}
			} else {
				FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Thông báo!",
						"Đã có biên bản họp tuần " + departmentMeeting.getWeek() + " năm "
								+ departmentMeeting.getYear());
				RequestContext.getCurrentInstance().showMessageInDialog(message);
			}
		} else {
			DepartmentMeeting kpiCompOld = departmentMeetingService.findById(departmentMeeting.getId());
			Date date2 = lc.withWeekOfWeekyear(kpiCompOld.getWeek()).withYear(kpiCompOld.getYear()).dayOfWeek()
					.withMinimumValue().toDate();
			if (kpiCompOld.isIsfinal()) {
				FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Thông báo!",
						"Biên bản đã được duyệt");
				RequestContext.getCurrentInstance().showMessageInDialog(message);
			} else {
				if (allowUpdate(date) && allowUpdate(date2)) {
					if (kpiCompOld.getWeek() != departmentMeeting.getWeek()
							|| kpiCompOld.getYear() != departmentMeeting.getYear()) {
						List<DepartmentMeeting> temps = departmentMeetingService.findDepartmentMeeting(
								departmentMeeting.getWeek(), departmentMeeting.getYear(),
								departmentMeeting.getDepartmentParent());
						if (temps.size() != 0) {
							FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Thông báo!",
									"Đã có biên bản họp tuần " + departmentMeeting.getWeek() + " năm "
											+ departmentMeeting.getYear());
							RequestContext.getCurrentInstance().showMessageInDialog(message);
						} else {
							DepartmentMeeting wf = departmentMeetingService.update(departmentMeeting);
							if (wf != null) {
								departmentMeeting = departmentMeetingService.findById(wf.getId());
								writeLogInfo("Cap nhat" + wf.toString());
								searchItem();
								notify.success();
							} else {
								notify.error();
							}
						}
					} else {
						DepartmentMeeting wf = departmentMeetingService.update(departmentMeeting);
						if (wf != null) {
							departmentMeeting = departmentMeetingService.findById(wf.getId());
							searchItem();
							writeLogInfo("Cap nhat" + wf.toString());
							notify.success();
						} else {
							notify.error();
						}
					}
				} else {
					notify.warningDetail();
				}
			}
		}

	}

	@Inject
	ApplicationBean applicationBean;
	boolean admin = false;
	Employee employee;

	public void reset() {
		LocalDate today = new LocalDate();
		departmentMeeting = new DepartmentMeeting();
		departmentMeeting.setWeek(today.getWeekOfWeekyear());
		departmentMeeting.setYear(today.getYear());

		yearS = today.getYear();

		try {
			String employeeCode = applicationBean.getAccount().getMember().getCode();
			employee = employeeService.findByCode(employeeCode);
			if (applicationBean.getAccount().isAdmin()) {
				departmentParents = departmentParentService.findAll();
				admin = true;
			} else if (employee.equals(employee.getDepartment().getDepartmentParent().getEmployee())) {
				departmentParents = new ArrayList<DepartmentParent>();
				departmentParents.add(employee.getDepartment().getDepartmentParent());
			} else {
				departmentParents = new ArrayList<DepartmentParent>();
				departmentParents.add(employee.getDepartment().getDepartmentParent());
			}
			departmentMeeting.setDepartmentParent(employee.getDepartment().getDepartmentParent());
		} catch (Exception e) {

		}
		searchItem();
	}

	public void showEdit() {
		if (departmentMeetingEdit != null && departmentMeetingEdit.getId() != null) {
			DepartmentMeeting od = departmentMeetingService.findById(departmentMeetingEdit.getId());
			if (od != null) {
				departmentMeeting = od;
			}
		}
	}

	public void delete() {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (departmentMeeting != null && departmentMeeting.getId() != null) {
			departmentMeeting = departmentMeetingService.findById(departmentMeeting.getId());
			if (departmentMeeting.isIsfinal()) {
				FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_WARN, "Thông báo!",
						"Biên bản họp này đã duyệt, không xóa được");
				RequestContext.getCurrentInstance().showMessageInDialog(message);
			} else {
				LocalDate lc = new LocalDate();
				Date date = lc.withWeekOfWeekyear(departmentMeeting.getWeek()).withYear(departmentMeeting.getYear())
						.dayOfWeek().withMinimumValue().toDate();
				if (allowDelete(date)) {
					boolean result = departmentMeetingService.delete(departmentMeeting);
					if (result) {
						departmentMeetings.remove(departmentMeeting);
						writeLogInfo("Xoa " + departmentMeeting.toString());
						reset();
						notify.success();
					} else {
						notify.warning("Không xoá được!");
					}
				} else {
					notify.warningDetail();
				}
			}
		} else {
			notify.warning("Chưa chọn phiếu!");
		}
	}

	public void searchItem() {
		try {
			List<DepartmentParent> dps = new ArrayList<DepartmentParent>();
			if (departmentParentS != null) {
				departmentMeetings = departmentMeetingService.findDepartmentMeeting(yearS, departmentParentS,false);
			} else {
				if (admin) {
					departmentMeetings = departmentMeetingService.findDepartmentMeeting(yearS, departmentParentS,false);
				} else if (employee.equals(employee.getDepartment().getDepartmentParent().getManagerEmployee())) {
					dps = departmentParentService.findByEmpMana(employee);
					departmentMeetings = departmentMeetingService.findDepartmentMeeting(yearS, dps);
				} else {
					dps.add(employee.getDepartment().getDepartmentParent());
					departmentMeetings = departmentMeetingService.findDepartmentMeeting(yearS, dps);
				}
			}
		} catch (Exception e) {
		}
	}

	public List<DepartmentMeeting> getDepartmentMeetings() {
		return departmentMeetings;
	}

	public void setDepartmentMeetings(List<DepartmentMeeting> departmentMeetings) {
		this.departmentMeetings = departmentMeetings;
	}

	public DepartmentMeeting getDepartmentMeeting() {
		return departmentMeeting;
	}

	public void setDepartmentMeeting(DepartmentMeeting departmentMeeting) {
		this.departmentMeeting = departmentMeeting;
	}

	public DepartmentMeeting getDepartmentMeetingEdit() {
		return departmentMeetingEdit;
	}

	public void setDepartmentMeetingEdit(DepartmentMeeting departmentMeetingEdit) {
		this.departmentMeetingEdit = departmentMeetingEdit;
	}

	public List<DepartmentParent> getDepartmentParents() {
		return departmentParents;
	}

	public void setDepartmentParents(List<DepartmentParent> departmentParents) {
		this.departmentParents = departmentParents;
	}

	public int getYearS() {
		return yearS;
	}

	public void setYearS(int yearS) {
		this.yearS = yearS;
	}

	public DepartmentParent getDepartmentParentS() {
		return departmentParentS;
	}

	public void setDepartmentParentS(DepartmentParent departmentParentS) {
		this.departmentParentS = departmentParentS;
	}

}
