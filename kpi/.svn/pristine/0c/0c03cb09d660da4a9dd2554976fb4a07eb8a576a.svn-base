package trong.lixco.com.beankpi;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.io.IOUtils;
import org.docx4j.org.xhtmlrenderer.pdf.ITextRenderer;
import org.jboss.logging.Logger;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.primefaces.context.RequestContext;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.ToggleEvent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.Visibility;

import trong.lixco.com.bean.AbstractBean;
import trong.lixco.com.classInfor.PrintKPI;
import trong.lixco.com.ejb.service.DepartmentParentService;
import trong.lixco.com.ejb.service.DepartmentService;
import trong.lixco.com.ejb.service.EmployeeService;
import trong.lixco.com.ejb.service.ParamReportDetailService;
import trong.lixco.com.ejb.servicekpi.BehaviourPersonService;
import trong.lixco.com.ejb.servicekpi.EmpPJobService;
import trong.lixco.com.ejb.servicekpi.FormulaKPIService;
import trong.lixco.com.ejb.servicekpi.KPIDepOfMonthService;
import trong.lixco.com.ejb.servicekpi.KPIPersonOfMonthService;
import trong.lixco.com.ejb.servicekpi.KPIPersonService;
import trong.lixco.com.ejb.servicekpi.OrientationPersonService;
import trong.lixco.com.ejb.servicekpi.PositionJobService;
import trong.lixco.com.jpa.entity.Department;
import trong.lixco.com.jpa.entity.DepartmentParent;
import trong.lixco.com.jpa.entity.Employee;
import trong.lixco.com.jpa.entity.ParamReportDetail;
import trong.lixco.com.jpa.entitykpi.BehaviourPerson;
import trong.lixco.com.jpa.entitykpi.FormulaKPI;
import trong.lixco.com.jpa.entitykpi.KPIDepMonth;
import trong.lixco.com.jpa.entitykpi.KPIDepOfMonth;
import trong.lixco.com.jpa.entitykpi.KPIPerson;
import trong.lixco.com.jpa.entitykpi.KPIPersonOfMonth;
import trong.lixco.com.jpa.entitykpi.OrientationPerson;
import trong.lixco.com.jpa.entitykpi.PositionJob;
import trong.lixco.com.nhansu.general.ApplicationBean;
import trong.lixco.com.nhansu.general.PathServerAccount;
import trong.lixco.com.service.publics.Account;
import trong.lixco.com.util.MediaKPIPersonBean;
import trong.lixco.com.util.Notify;
import trong.lixco.com.util.PDFMerger;

import com.lowagie.text.pdf.BaseFont;

@ManagedBean
@SessionScoped
// KPI ca nhan
public class KPIPersonBean extends AbstractBean<KPIPerson> {
	private static final long serialVersionUID = 1L;
	private SimpleDateFormat sf;
	private Notify notify;
	private List<KPIPerson> kPIPersons;
	private List<KPIPerson> kPIPersonFilters;

	private boolean orverideData = false;

	private final int TOTALPARAM = 100;

	private KPIPerson kPIPerson;
	private KPIPerson kPIPersonEdit;
	private List<KPIPersonOfMonth> kpiPersonOfMonths;
	private List<KPIPersonOfMonth> kpiPersonOfMonthAdds;
	private List<KPIPersonOfMonth> kpiPersonOfMonthRemoves;

	private DepartmentParent departmentParent, departmentParentSearch;
	private PositionJob positionJobSearch;
	private List<DepartmentParent> departmentParents;
	private Department departmentSearch;
	private List<Department> departmentSearchs;
	private boolean isEmp = false;// la nhan vien

	private List<Employee> employees;
	private Employee employeeSearch;
	private int monthSearch = 0;
	private int yearSearch = 0;
	private boolean select = false;

	private int monthCopy = 0;
	private int yearCopy = 0;

	private int tabindex;

	private PositionJob positionJobSelect;
	private List<DepartmentParent> departmentParentSearchs;

	private List<Boolean> list;
	private List<OrientationPerson> orientationPersons;

	private List<KPIDepOfMonth> kpiDepOfMonths;

	private List<BehaviourPerson> behaviourPersons;
	private List<FormulaKPI> formulaKPIs;
	private FormulaKPI formulaKPISelect;

	@Inject
	private FormulaKPIService formulaKPIService;
	@Inject
	private BehaviourPersonService behaviourPersonService;
	@Inject
	private ParamReportDetailService paramReportDetailService;
	@Inject
	private OrientationPersonService orientationPersonService;
	@Inject
	private DepartmentParentService departmentParentService;
	@Inject
	private KPIPersonService kPIPersonService;
	@Inject
	private PositionJobService positionJobService;
	@Inject
	private EmployeeService employeeService;
	@Inject
	private Logger logger;
	@Inject
	private ApplicationBean applicationBean;

	@Override
	protected Logger getLogger() {
		return logger;
	}

	private JasperPrint jasperPrint;

	public void printList() {
		notify = new Notify(FacesContext.getCurrentInstance());
		try {
			String pathre = "/resources/reports/kpis/kpiperson.jasper";
			String reportPath = null;
			Map<String, Object> importParam = null;
			importParam = installConfigPersonReport();
			List<ParamReportDetail> paramnhaps = paramReportDetailService
					.findByParamReports_param_name("kpicanhanthang");
			for (ParamReportDetail pd : paramnhaps) {
				importParam.put(pd.getKey(), pd.getValue());
			}
			reportPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath(pathre);
			importParam.put("REPORT_LOCALE", new Locale("vi", "VN"));

			List<PrintKPI> printKPIPRs = new ArrayList<PrintKPI>();
			SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");

			for (int j = 0; j < kPIPersons.size(); j++) {
				if (kPIPersons.get(j).isSelect()) {
					List<PrintKPI> printKPIs = new ArrayList<PrintKPI>();
					List<KPIPersonOfMonth> expds = kPIPersonService.findKPIPerson(kPIPersons.get(j));
					for (int i = 0; i < expds.size(); i++) {
						PrintKPI pr = new PrintKPI(expds.get(i), sf, empPJobService);
						printKPIs.add(pr);
					}
					boolean status = true;
					for (int i = 0; i < printKPIs.size(); i++) {
						if ("I".equals(printKPIs.get(i).getHeaderGroupCode())) {
							status = false;
							break;
						}
					}
					if (status && expds.size() != 0) {
						PrintKPI pk = new PrintKPI(expds.get(0), true, empPJobService);
						pk.setHeaderGroupCode("I");
						pk.setHeaderGroupName("Phẩm chất - thái độ - hành vi");
						pk.setHeaderGroupWeighted(30.0);
						printKPIs.add(pk);
					}
					printKPIPRs.addAll(printKPIs);
				}
			}

			printKPIPRs.sort(Comparator.comparing(PrintKPI::getDepartmentName).thenComparing(PrintKPI::getHearder)
					.thenComparing(PrintKPI::getEmployeeName).thenComparing(PrintKPI::getHeaderGroupCode)
					.thenComparing(PrintKPI::getNo));

			JRDataSource beanDataSource = new JRBeanCollectionDataSource(printKPIPRs);
			jasperPrint = JasperFillManager.fillReport(reportPath, importParam, beanDataSource);
			data = JasperExportManager.exportReportToPdf(jasperPrint);
			mediaBean.setData(data);
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("PF('showpdfreport').show();");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void printOnly() {
		notify = new Notify(FacesContext.getCurrentInstance());
		try {
			String pathre = "/resources/reports/kpis/kpiperson.jasper";
			List<KPIPersonOfMonth> expds = kPIPersonService.findKPIPerson(kPIPerson);
			String reportPath = null;
			Map<String, Object> importParam = null;
			importParam = installConfigPersonReport();
			List<ParamReportDetail> paramnhaps = paramReportDetailService
					.findByParamReports_param_name("kpicanhanthang");
			for (ParamReportDetail pd : paramnhaps) {
				importParam.put(pd.getKey(), pd.getValue());
			}
			reportPath = FacesContext.getCurrentInstance().getExternalContext().getRealPath(pathre);
			importParam.put("REPORT_LOCALE", new Locale("vi", "VN"));

			List<PrintKPI> printKPIs = new ArrayList<PrintKPI>();
			SimpleDateFormat sf = new SimpleDateFormat("dd/MM/yyyy");
			for (int i = 0; i < expds.size(); i++) {
				PrintKPI pr = new PrintKPI(expds.get(i), sf, empPJobService);
				printKPIs.add(pr);
			}
			boolean status = true;
			for (int i = 0; i < printKPIs.size(); i++) {
				if ("I".equals(printKPIs.get(i).getHeaderGroupCode())) {
					status = false;
					break;
				}
			}
			if (status && expds.size() != 0) {
				PrintKPI pk = new PrintKPI(expds.get(0), true, empPJobService);
				pk.setHeaderGroupCode("I");
				pk.setHeaderGroupName("Phẩm chất - thái độ - hành vi");
				pk.setHeaderGroupWeighted(30.0);
				printKPIs.add(pk);
			}
			printKPIs.sort(Comparator.comparing(PrintKPI::getHeaderGroupCode).thenComparing(PrintKPI::getNo));

			JRDataSource beanDataSource = new JRBeanCollectionDataSource(printKPIs);
			jasperPrint = JasperFillManager.fillReport(reportPath, importParam, beanDataSource);
			data = JasperExportManager.exportReportToPdf(jasperPrint);
			mediaBean.setData(data);
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("PF('showpdfreport').show();");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Inject
	MediaKPIPersonBean mediaBean;
	byte[] data;

	public StreamedContent getMedia() throws IOException {
		return mediaBean.getMedia();
	}

	public void process(String idp) {
		if (kpiPersonOfMonths.size() != 0) {
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("document.getElementById('" + idp + "').click();");
		} else {
			// Khong co du lieu
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("PF('thongbao').show();");
		}
	}

	public void processList(String idp) {
		List<KPIPerson> exps = new ArrayList<KPIPerson>();
		notify = new Notify(FacesContext.getCurrentInstance());
		for (int j = 0; j < kPIPersons.size(); j++) {
			if (kPIPersons.get(j).isSelect())
				exps.add(kPIPersons.get(j));
		}

		if (exps.size() != 0) {
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("document.getElementById('" + idp + "').click();");
		} else {
			// Khong co du lieu
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("PF('thongbao').show();");
		}
	}

	public void onToggle(ToggleEvent e) {
		list.set((Integer) e.getData(), e.getVisibility() == Visibility.VISIBLE);
	}

	@Override
	public void initItem() {
		sf = new SimpleDateFormat("dd/MM/yyyy");
		kPIPersons = new ArrayList<KPIPerson>();
		kpiPersonOfMonths = new ArrayList<KPIPersonOfMonth>();
		kpiPersonOfMonthAdds = new ArrayList<KPIPersonOfMonth>();
		kpiPersonOfMonthRemoves = new ArrayList<KPIPersonOfMonth>();
		orientationPersons = new ArrayList<OrientationPerson>();

		LocalDate lc = new LocalDate();
		monthSearch = lc.getMonthOfYear();
		yearSearch = lc.getYear();

		list = Arrays.asList(true, true, true, true, true, false, false, false, false, false, false, true, true, true,
				true, true, true, false, true);
		tabindex = 0;
		reset();
		searchItem();
	}

	public void removeDetail(int no) {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (kpiPersonOfMonths.get(no - 1).getId() != null)
			kpiPersonOfMonthRemoves.add(kpiPersonOfMonths.get(no - 1));
		kpiPersonOfMonths.remove(no - 1);
		double total = 0;
		for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
			// kpiPersonOfMonths.get(i).setNo(i + 1);
			total += kpiPersonOfMonths.get(i).getRatioCompleteIsWeighted();
		}
		for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
			kpiPersonOfMonths.get(i).setIndex(i + 1);
		}
		kPIPerson.setTotal(total);
	}

	public void addDetail() {
		KPIPersonOfMonth item = new KPIPersonOfMonth();
		item.setContentAppreciate("");
		kpiPersonOfMonths.add(item);
		// for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
		// kpiPersonOfMonths.get(i).setNo(i + 1);
		// }
		for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
			kpiPersonOfMonths.get(i).setIndex(i + 1);
		}
	}

	private KPIPersonOfMonth kpy;

	public void showListFormula(KPIPersonOfMonth param) {
		notify = new Notify(FacesContext.getCurrentInstance());
		formulaKPIs = formulaKPIService.findAll();
		formulaKPISelect = param.getFormulaKPI();
		kpy = param;
		RequestContext context = RequestContext.getCurrentInstance();
		context.execute("PF('dialogFormula').show();");
	}

	public void updateFormula() {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (formulaKPISelect == null) {
			notify.warning("Chưa chọn công thức!");
		} else {
			for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
				// if (kpiPersonOfMonths.get(i).getNo() == kpy.getNo()) {
				// kpy.setFormulaKPI(formulaKPISelect);
				// kpy.setCodeFormula(formulaKPISelect.getCode());
				// kpiPersonOfMonths.set(i, kpy);
				// notify.success();
				// break;
				// }
				if (kpiPersonOfMonths.get(i).getIndex() == kpy.getIndex()) {
					kpy.setFormulaKPI(formulaKPISelect);
					kpy.setCodeFormula(formulaKPISelect.getCode());
					kpiPersonOfMonths.set(i, kpy);
					notify.success();
					break;
				}
			}
		}
	}

	public void showBehaviour() {
		behaviourPersons = behaviourPersonService.findAll();
	}

	public void addBehaviour() {
		for (int i = 0; i < behaviourPersons.size(); i++) {
			if (behaviourPersons.get(i).isSelect()) {
				KPIPersonOfMonth item = new KPIPersonOfMonth();
				item.setBehaviour(true);
				item.setRatioComplete(-behaviourPersons.get(i).getMinusPoint());
				item.setRatioCompleteIsWeighted((-behaviourPersons.get(i).getMinusPoint() * 30) / 100);
				item.setContentAppreciate(behaviourPersons.get(i).getContent());
				kpiPersonOfMonthAdds.add(item);
			}

		}
		for (int i = 0; i < kpiPersonOfMonthAdds.size(); i++) {
			kpiPersonOfMonthAdds.get(i).setNo(i + 1);
		}
	}

	public void removeDetailAdd(int no) {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (kpiPersonOfMonthAdds.get(no - 1).getId() != null)
			kpiPersonOfMonthRemoves.add(kpiPersonOfMonthAdds.get(no - 1));
		kpiPersonOfMonthAdds.remove(no - 1);
		double total = 0;
		for (int i = 0; i < kpiPersonOfMonthAdds.size(); i++) {
			kpiPersonOfMonthAdds.get(i).setNo(i + 1);
			total += kpiPersonOfMonthAdds.get(i).getRatioCompleteIsWeighted();
		}
		for (int i = 0; i < kpiPersonOfMonthAdds.size(); i++) {
			kpiPersonOfMonthAdds.get(i).setIndex(i + 1);
		}
		kPIPerson.setTotal(total);
	}

	public void ajaxSelectDep() {
		if (departmentParent != null)
			employees = employeeService.findByDepp(departmentParent);
	}

	public boolean validate() {
		if (kPIPerson != null && kPIPerson.getEmployee() != null)
			return true;
		return false;
	}

	public void createAndDelete() {
		List<KPIPerson> temps = kPIPersonService.findRange(kPIPerson.getEmployee(), kPIPerson.getKmonth(),
				kPIPerson.getKyear());
		for (int i = 0; i < temps.size(); i++) {
			kPIPersonService.delete(temps.get(i));
		}
		List<KPIPersonOfMonth> listSaves = new ArrayList<KPIPersonOfMonth>();
		listSaves.addAll(kpiPersonOfMonths);
		listSaves.addAll(kpiPersonOfMonthAdds);
		kPIPerson.setKpiPersonOfMonths(listSaves);
		Long id = kPIPerson.getId();
		kPIPerson.setId(null);
		KPIPerson wf = kPIPersonService.saveOrUpdate(kPIPerson, kpiPersonOfMonthRemoves);
		if (wf != null) {
			if (id != null)
				kPIPersonService.delete(kPIPersonService.findById(id));
			kPIPerson = kPIPersonService.findByIdAll(wf.getId());
			writeLogInfo("Tao moi " + wf.toString());
			notify.success();
			searchItem();
		} else {
			notify.error();
		}
	}

	public void createAndDeleteCopy() {
		notify = new Notify(FacesContext.getCurrentInstance());
		kPIPerson.setId(null);
		kPIPerson.setKmonth(monthCopy);
		kPIPerson.setKyear(yearCopy);
		kPIPerson.setSignKPI(false);
		kPIPerson.setSignResultKPI(false);
		kPIPerson.setTotal(0);
		kPIPerson.setTotalHV(0);
		kPIPerson.setTotalCV(0);
		kPIPerson.setDateRecei(new DateTime(yearCopy, monthCopy, 1, 0, 0).withDayOfMonth(1).minusDays(1).toDate());
		kPIPerson.setDateAssignResult(new DateTime(yearCopy, monthCopy, 1, 0, 0).plusMonths(1).withDayOfMonth(1)
				.minusDays(1).toDate());
		List<KPIPerson> temps = kPIPersonService.findRange(kPIPerson.getEmployee(), kPIPerson.getKmonth(),
				kPIPerson.getKyear());
		for (int i = 0; i < temps.size(); i++) {
			kPIPersonService.delete(temps.get(i));
		}
		List<KPIPersonOfMonth> listSaves = new ArrayList<KPIPersonOfMonth>();
		listSaves.addAll(kpiPersonOfMonths);
		listSaves.addAll(kpiPersonOfMonthAdds);
		for (int i = 0; i < listSaves.size(); i++) {
			listSaves.get(i).setId(null);
			listSaves.get(i).setPerformKPI(null);
			listSaves.get(i).setRatioComplete(0);
			listSaves.get(i).setRatioCompleteIsWeighted(0);
			listSaves.get(i).setDataAssign(null);
		}
		kPIPerson.setKpiPersonOfMonths(listSaves);
		KPIPerson wf = kPIPersonService.saveOrUpdate(kPIPerson, kpiPersonOfMonthRemoves);
		if (wf != null) {
			kPIPerson = kPIPersonService.findByIdAll(wf.getId());
			kPIPersonEdit = kPIPerson;
			writeLogInfo("Tao moi " + wf.toString());
			notify.success();
			searchItem();
		} else {
			notify.error();
		}

	}

	public void updatesignKPI() {
		notify = new Notify(FacesContext.getCurrentInstance());
		Date date = new Date(kPIPerson.getKyear(), kPIPerson.getKmonth(), 1);
		if (allowUpdate(date)) {
			KPIPerson wf = kPIPersonService.update(kPIPerson);
			if (kPIPersons.contains(wf)) {
				kPIPersons.set(kPIPersons.indexOf(wf), wf);
			}
			kPIPersons.set(kPIPersons.indexOf(wf), wf);
			writeLogInfo("Duyet KPI" + wf.toString());
			notify.success();
		} else {
			notify.warningDetail();
		}

	}

	public void createCopy() {
		notify = new Notify(FacesContext.getCurrentInstance());
		Date date = new Date(yearCopy, monthCopy, 1);
		if (allowSave(date)) {
			List<KPIPerson> temps = kPIPersonService.findRange(kPIPerson.getEmployee(), monthCopy, yearCopy);
			if (temps.size() != 0) {
				boolean status = false;
				for (int i = 0; i < temps.size(); i++) {
					if (temps.get(i).isSignKPI()) {
						status = true;
						break;
					}
				}
				if (status) {
					notify.warning("Tháng đã duyệt không thay thế được.");
				} else {
					RequestContext context = RequestContext.getCurrentInstance();
					context.execute("PF('dialogConfirmCopy').show();");
				}
			} else {
				kPIPerson.setId(null);
				kPIPerson.setKmonth(monthCopy);
				kPIPerson.setKyear(yearCopy);
				kPIPerson.setSignKPI(false);
				kPIPerson.setSignResultKPI(false);
				kPIPerson.setTotal(0);
				kPIPerson.setTotalHV(0);
				kPIPerson.setTotalCV(0);
				kPIPerson.setDateRecei(new DateTime(yearCopy, monthCopy, 1, 0, 0).withDayOfMonth(1).minusDays(1)
						.toDate());
				kPIPerson.setDateAssignResult(new DateTime(yearCopy, monthCopy, 1, 0, 0).plusMonths(1)
						.withDayOfMonth(1).minusDays(1).toDate());
				List<KPIPersonOfMonth> listSaves = new ArrayList<KPIPersonOfMonth>();
				listSaves.addAll(kpiPersonOfMonths);
				listSaves.addAll(kpiPersonOfMonthAdds);

				for (int i = 0; i < listSaves.size(); i++) {
					listSaves.get(i).setId(null);
					listSaves.get(i).setPerformKPI(null);
					listSaves.get(i).setRatioComplete(0);
					listSaves.get(i).setRatioCompleteIsWeighted(0);
					listSaves.get(i).setDataAssign(null);
				}

				kPIPerson.setKpiPersonOfMonths(listSaves);
				KPIPerson wf = kPIPersonService.saveOrUpdate(kPIPerson, kpiPersonOfMonthRemoves);
				if (wf != null) {
					kPIPerson = kPIPersonService.findByIdAll(wf.getId());
					kPIPersonEdit = kPIPerson;
					kPIPersons.add(wf);
					writeLogInfo("Tao moi " + wf.toString());
					notify.success();
					searchItem();
				} else {
					notify.error();
				}
			}
		} else {
			notify.warningDetail();
		}

	}

	public void createOrUpdate() {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (validate()) {
			Date date = new Date(kPIPerson.getKyear(), kPIPerson.getKmonth(), 1);
			if (kPIPerson.getId() == null) {
				if (allowSave(date)) {
					List<KPIPerson> temps = kPIPersonService.findRange(kPIPerson.getEmployee(), kPIPerson.getKmonth(),
							kPIPerson.getKyear());
					if (temps.size() != 0) {
						boolean status = false;
						for (int i = 0; i < temps.size(); i++) {
							if (temps.get(i).isSignKPI()) {
								status = true;
								break;
							}
						}
						if (status) {
							notify.warning("Tháng đã duyệt không thay thế được.");
						} else {
							RequestContext context = RequestContext.getCurrentInstance();
							context.execute("PF('dialogConfirm').show();");
						}
					} else {
						List<KPIPersonOfMonth> listSaves = new ArrayList<KPIPersonOfMonth>();
						double checkp = 0;
						for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
							checkp += kpiPersonOfMonths.get(i).getWeighted();
						}
						if (kpiPersonOfMonths.size() != 0 && checkp != TOTALPARAM) {
							noticeError("Không lưu được. Tổng trọng số các mục tiêu khác 100%");
						} else {
							listSaves.addAll(kpiPersonOfMonths);
							listSaves.addAll(kpiPersonOfMonthAdds);
							kPIPerson.setKpiPersonOfMonths(listSaves);
							KPIPerson wf = kPIPersonService.saveOrUpdate(kPIPerson, kpiPersonOfMonthRemoves);
							if (wf != null) {
								kPIPerson = kPIPersonService.findByIdAll(wf.getId());
								kPIPersons.add(wf);
								writeLogInfo("Tao moi " + wf.toString());
								notify.success();
								searchItem();
							} else {
								notify.error();
							}
						}
					}
				} else {
					notify.warningDetail();
				}
			} else {
				KPIPerson kpiPersonOld = kPIPersonService.findById(kPIPerson.getId());
				// if (kpiPersonOld.isSignKPI()) {
				// this.kPIPersonEdit = kpiPersonOld;
				// showEdit();
				// notify.warning("Phiếu đã duyệt.");
				// } else {
				Date date2 = new Date(kpiPersonOld.getKyear(), kpiPersonOld.getKmonth(), 1);
				if (allowUpdate(date) && allowUpdate(date2)) {
					if (kpiPersonOld.getKmonth() != kPIPerson.getKmonth()
							|| kpiPersonOld.getKyear() != kPIPerson.getKyear()) {
						List<KPIPerson> temps = kPIPersonService.findRange(kPIPerson.getEmployee(),
								kPIPerson.getKmonth(), kPIPerson.getKyear());
						if (temps.size() != 0) {
							boolean status = false;
							for (int i = 0; i < temps.size(); i++) {
								if (temps.get(i).isSignKPI()) {
									status = true;
									break;
								}
							}
							if (status) {
								notify.warning("Tháng đã duyệt không thay thế được.");
							} else {
								RequestContext context = RequestContext.getCurrentInstance();
								context.execute("PF('dialogConfirm').show();");
							}
						} else {
							List<KPIPersonOfMonth> listSaves = new ArrayList<KPIPersonOfMonth>();
							double checkp = 0;
							for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
								checkp += kpiPersonOfMonths.get(i).getWeighted();
							}
							if (kpiPersonOfMonths.size() != 0 && checkp != TOTALPARAM) {
								noticeError("Không lưu được. Tổng trọng số các mục tiêu khác 100%");
							} else {
								listSaves.addAll(kpiPersonOfMonths);
								listSaves.addAll(kpiPersonOfMonthAdds);
								kPIPerson.setKpiPersonOfMonths(listSaves);
								KPIPerson wf = kPIPersonService.saveOrUpdate(kPIPerson, kpiPersonOfMonthRemoves);
								if (wf != null) {
									kPIPerson = kPIPersonService.findByIdAll(wf.getId());
									writeLogInfo("Cap nhat" + wf.toString());
									notify.success();
								} else {
									notify.error();
								}
							}
						}
					} else {
						List<KPIPersonOfMonth> listSaves = new ArrayList<KPIPersonOfMonth>();
						double checkp = 0;
						for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
							checkp += kpiPersonOfMonths.get(i).getWeighted();
						}
						if (kpiPersonOfMonths.size() != 0 && checkp != TOTALPARAM) {
							noticeError("Không lưu được. Tổng trọng số các mục tiêu khác 100%");
						} else {
							listSaves.addAll(kpiPersonOfMonths);
							listSaves.addAll(kpiPersonOfMonthAdds);
							kPIPerson.setKpiPersonOfMonths(listSaves);
							KPIPerson wf = kPIPersonService.saveOrUpdate(kPIPerson, kpiPersonOfMonthRemoves);
							if (wf != null) {
								kPIPerson = kPIPersonService.findByIdAll(wf.getId());
								writeLogInfo("Cap nhat" + wf.toString());
								notify.success();
							} else {
								notify.error();
							}
						}
					}

				} else {
					notify.warningDetail();
				}
				// }
			}
		} else {
			notify.warning("Điền đầy đủ thông tin!");
		}
	}

	private KPIPersonOfMonth kpm;

	public void selectData(KPIPersonOfMonth kpm) {
		this.kpm = kpm;
	}

	@Inject
	KPIPersonOfMonthService kPIPersonOfMonthService;

	// Cap nhat dư liêu chung minh
	public void updateDataAssign(FileUploadEvent event) {
		notify = new Notify(FacesContext.getCurrentInstance());
		allowUpdate(null);
		if (kpm != null && kpm.getId() != null) {
			if (allowUpdate(null)) {
				try (InputStream input = event.getFile().getInputstream()) {
					byte[] file = IOUtils.toByteArray(input);
					if (!orverideData) {
						if (kpm.getDataAssign() != null) {
							file = PDFMerger.mergePdfs(kpm.getDataAssign(), file);
						}
					}
					if (file == null) {
						notice("File vượt quá dung lượng.");
					} else {
						kpm.setDataAssign(file);
						kPIPersonOfMonthService.update(kpm);
						RequestContext context = RequestContext.getCurrentInstance();
						context.execute("PF('dialogDataAssign').hide();");
						notice("Tải lên thành công.");
					}
				} catch (Exception e) {
					kpm = kPIPersonOfMonthService.findById(kpm.getId());
					kpiPersonOfMonths.set(kpiPersonOfMonths.indexOf(kpm), this.kpm);
					noticeError("Không lưu được. Dữ liệu vượt quá dung lượng");
				}
			} else {
				noticeError("Tài khoản không có quyền thực hiện.");
			}
		} else {
			noticeError("Không chọn nội dung nhập dữ liệu.");
		}

	}

	private StreamedContent streamedContent;

	public void processDataAssign(KPIPersonOfMonth kpm) {
		if (kpm != null) {
			this.kpm = kpm;
			if (this.kpm.getDataAssign() != null) {
				RequestContext context = RequestContext.getCurrentInstance();
				context.execute("document.getElementById('formdataassign:process').click();");
			} else {
				notice("Không có dữ liệu chứng minh.");
			}
		} else {
			notice("Không chọn được dữ liệu.");
		}
	}

	@Inject
	private PathServerAccount pathServerAccount;

	public void showPDFData() throws IOException {
		if (kpm != null && kpm.getId() != null) {
			notify = new Notify(FacesContext.getCurrentInstance());
			try {
				String server = pathServerAccount.getPathlocal();
				FacesContext facesContext = FacesContext.getCurrentInstance();
				ExternalContext externalContext = facesContext.getExternalContext();
				try {
					HttpSession session = (HttpSession) externalContext.getSession(true);
					ITextRenderer renderer = new ITextRenderer();

					// ServletContext servletContext = (ServletContext)
					// FacesContext.getCurrentInstance().getExternalContext().getContext();
					// String resHomeImgPath =
					// servletContext.getRealPath("resources\\fonts\\arial.ttf");
					// renderer.getFontResolver().addFont(resHomeImgPath,"UTF-8",BaseFont.NOT_EMBEDDED);
					renderer.setDocument(new URL(server + "/nhansu/showdata.xhtml;jsessionid=" + session.getId()
							+ "?pdf=true").toString());
					renderer.layout();

					HttpServletResponse response = (HttpServletResponse) externalContext.getResponse();
					response.reset();
					response.setContentType("application/pdf");
					response.addHeader("Content-disposition", "inline;filename=report.pdf");

					response.setContentLength(kpm.getDataAssign().length);
					response.getOutputStream().write(kpm.getDataAssign(), 0, kpm.getDataAssign().length);
					response.getOutputStream().flush();

					OutputStream browserStream = response.getOutputStream();
					renderer.createPDF(browserStream);
				} finally {
					facesContext.responseComplete();
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Inject
	private EmpPJobService empPJobService;
	private List<PositionJob> positionJobs;

	public void showDialogOrien() {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (kPIPerson.getId() != null) {
			positionJobs = empPJobService.findByEmployeePos(kPIPerson.getEmployee());
			if (positionJobs.size() != 0)
				positionJobSelect = positionJobs.get(0);
			showOrientationPerson();
			RequestContext context = RequestContext.getCurrentInstance();
			context.execute("PF('dialogOrien').show();");
		} else {
			notify.warning("Chưa lưu thông tin phòng ban/nhân viên!");
		}
	}

	@Inject
	private KPIDepOfMonthService kpiDepOfMonthService;

	public void showDialogKPIDepart() {
		notify = new Notify(FacesContext.getCurrentInstance());
		try {
			if (kPIPerson.getId() != null) {
				KPIDepMonth kpim = kpiDepOfMonthService.findKPIDepMonth(kPIPerson.getKmonth(), kPIPerson.getKyear(),
						kPIPerson.getEmployee().getDepartment().getDepartmentParent());
				kpiDepOfMonths = kpim.getKpiDepOfMonths();
				RequestContext context = RequestContext.getCurrentInstance();
				context.execute("PF('dialogKPIDepart').show();");
			} else {
				notify.warning("Chưa lưu thông tin phòng ban/nhân viên!");
			}
		} catch (Exception e) {
			e.printStackTrace();
			notify.warning("Xảy ra lỗi trong khi tải KPI phòng.");
		}

	}

	public void copy() {
		notify = new Notify(FacesContext.getCurrentInstance());
		try {
			if (kPIPerson.getId() != null) {
				RequestContext context = RequestContext.getCurrentInstance();
				context.execute("PF('dialogCopy').show();");
			} else {
				notify.warning("Chưa chọn dữ liệu để copy!");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void showOrientationPerson() {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (positionJobSelect != null) {
			orientationPersons = orientationPersonService.findSearch(positionJobSelect.getDepartmentParent(),
					positionJobSelect);
		} else {
			notify.warning("Chưa chọn vị trí công việc!");
		}

	}

	public void getKPIDepart() {
		for (int i = 0; i < kpiDepOfMonths.size(); i++) {
			if (kpiDepOfMonths.get(i).isSelect()) {
				KPIPersonOfMonth item = new KPIPersonOfMonth();
				item.setContentAppreciate(kpiDepOfMonths.get(i).getContentAppreciate());
				kpiPersonOfMonths.add(item);
			}
		}
		// for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
		// kpiPersonOfMonths.get(i).setNo(i + 1);
		// }
		for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
			kpiPersonOfMonths.get(i).setIndex(i + 1);
		}
	}

	public void getOrientationPerson() {
		for (int i = 0; i < orientationPersons.size(); i++) {
			if (orientationPersons.get(i).isSelect()) {
				KPIPersonOfMonth item = new KPIPersonOfMonth();
				try {
					item.setCodeFormula(orientationPersons.get(i).getFormulaKPI().getCode());
				} catch (Exception e) {
				}
				item.setOrientationPerson(orientationPersons.get(i));
				item.setContentAppreciate(orientationPersons.get(i).getContent());
				kpiPersonOfMonths.add(item);
			}
		}
		// for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
		// kpiPersonOfMonths.get(i).setNo(i + 1);
		// }
		for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
			kpiPersonOfMonths.get(i).setIndex(i + 1);
		}
	}

	int totalHV = 30;
	double totalCV = 0;

	public void caculatorResult() {
		totalCV = 0;
		totalHV = 30;
		for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
			KPIPersonOfMonth item = kpiPersonOfMonths.get(i);
			// Lay bo cong thuc xem tinh theo sua dung cong thuc nao
			String KH = item.getPlanKPI();// Ke hoach
			String TH = item.getPerformKPI();// thuc hien
			// Khai bao bo script de tinh bieu thuc
			ScriptEngineManager mgr = new ScriptEngineManager();
			ScriptEngine engine = mgr.getEngineByName("JavaScript");
			// kiem tra bieu thuc dung
			boolean iscacul = true;
			boolean isdate = false;
			Date THd = null;
			Date KHd = null;
			try {
				THd = sf.parse(TH);
			} catch (Exception e) {
			}
			try {
				KHd = sf.parse(KH);
			} catch (Exception e) {
			}
			if (THd != null && KHd != null) {
				try {
					engine.eval("var TH = " + "new Date(" + (THd.getYear() + 1900) + ", " + (THd.getMonth()) + ", "
							+ (THd.getDate() + 1) + ");");
					engine.eval("var KH = " + "new Date(" + (KHd.getYear() + 1900) + ", " + (KHd.getMonth()) + ", "
							+ (KHd.getDate() + 1) + ");");
					isdate = true;
				} catch (Exception e) {
					iscacul = false;
					kpiPersonOfMonths.get(i).setRatioComplete(0);
					kpiPersonOfMonths.get(i).setRatioCompleteIsWeighted(0);
					totalCV += 0;
					e.printStackTrace();
				}

			} else {
				try {
					engine.eval("var TH = " + TH);
					engine.eval("var KH = " + KH);
				} catch (Exception e) {
					iscacul = false;
					kpiPersonOfMonths.get(i).setRatioComplete(0);
					kpiPersonOfMonths.get(i).setRatioCompleteIsWeighted(0);
					totalCV += 0;
					e.printStackTrace();
				}
			}
			if (iscacul) {
				try {
					String KQ = "";
					if (item.getFormulaKPI() != null) {
						KQ = item.getFormulaKPI().getCodeVSGood();
					} else {
						KQ = item.getOrientationPerson().getFormulaKPI().getCodeVSGood();
					}
					engine.eval("var KQ = " + KQ);
					if (!"".equals(item.getParamA()))
						engine.eval("var A = " + item.getParamA());
					if (!"".equals(item.getParamB()))
						engine.eval("var B = " + item.getParamB());
					if (!"".equals(item.getParamC()))
						engine.eval("var C = " + item.getParamC());
					if (!"".equals(item.getParamD()))
						engine.eval("var D = " + item.getParamD());
					if (!"".equals(item.getParamE()))
						engine.eval("var E = " + item.getParamE());
					if (!"".equals(item.getParamF()))
						engine.eval("var F = " + item.getParamF());
					if ((boolean) engine.get("KQ")) {
						// ket qua thu hien theo tinh dung
						String RESULT = "";
						if (item.getFormulaKPI() != null) {
							RESULT = item.getFormulaKPI().getCodeGood();
						} else {
							RESULT = item.getOrientationPerson().getFormulaKPI().getCodeGood();
						}
						engine.eval("var RESULT = " + RESULT);
					} else {
						// ket qua false
						String code = "";
						if (item.getFormulaKPI() != null) {
							code = item.getFormulaKPI().getCodeNotGood();
						} else {
							code = item.getOrientationPerson().getFormulaKPI().getCodeNotGood();
						}
						if (isdate) {
							if (code.contains("TH-KH") || code.contains("KH-TH")) {
								engine.eval("var KQ = Math.abs((TH.getTime() - KH.getTime()) / (24 * 60 * 60 * 1000))");
								code = code.replaceAll("TH-KH", "KQ");
								code = code.replaceAll("KH-TH", "KQ");
							}
						} else {
							if (code.contains("TH-KH") || code.contains("KH-TH")) {
								engine.eval("var KQ = Math.abs((TH - KH))");
								code = code.replaceAll("TH-KH", "KQ");
								code = code.replaceAll("KH-TH", "KQ");
							}
						}

						engine.eval("var RESULT = " + code);
					}
					Double result = (double) Math.round(Double.parseDouble(engine.get("RESULT").toString()));
					if (result < 0)
						result = 0.0;
					try {
						if (item.getFormulaKPI().isMax100())
							if (result > 100)
								result = 100.0;
					} catch (Exception e) {
					}

					kpiPersonOfMonths.get(i).setRatioComplete(Math.round(result));
					kpiPersonOfMonths.get(i).setRatioCompleteIsWeighted(
							Math.round((result * kpiPersonOfMonths.get(i).getWeighted()) / 100));
					totalCV += kpiPersonOfMonths.get(i).getRatioCompleteIsWeighted();

				} catch (Exception e) {
					kpiPersonOfMonths.get(i).setRatioComplete(0);
					kpiPersonOfMonths.get(i).setRatioCompleteIsWeighted(0);
					totalCV += 0;
					e.printStackTrace();
				}

			}
		}
		totalCV = totalCV * 70 / 100;
		for (int i = 0; i < kpiPersonOfMonthAdds.size(); i++) {
			if (kpiPersonOfMonthAdds.get(i).getContentAppreciate() != null
					&& !"".equals(kpiPersonOfMonthAdds.get(i).getContentAppreciate().trim()))
				totalHV += kpiPersonOfMonthAdds.get(i).getRatioCompleteIsWeighted();
		}
		// if (totalHV < 0)
		// totalHV = 0;
		kPIPerson.setTotalHV(Math.round(totalHV));
		double a = (double) Math.round(totalCV * 10) / 10;
		kPIPerson.setTotalCV(Math.round(a));
		kPIPerson.setTotal(Math.round(kPIPerson.getTotalCV() + totalHV));
	}

	boolean manager = false;
	private Account account;
	private Employee employee;

	public void reset() {
		DateTime dt = new DateTime();
		kPIPerson = new KPIPerson();
		monthCopy = dt.getMonthOfYear();
		yearCopy = dt.getYear();
		kPIPerson.setDateRecei(new DateTime().withDayOfMonth(1).minusDays(1).toDate());
		kPIPerson.setDateAssignResult(new DateTime().plusMonths(1).withDayOfMonth(1).minusDays(1).toDate());
		kpiPersonOfMonths.clear();
		kpiPersonOfMonthAdds.clear();
		orientationPersons.clear();
		kpiPersonOfMonthRemoves.clear();
		departmentParent = null;
		employees = null;

		try {
			String employeeCode = applicationBean.getAccount().getMember().getCode();
			employee = employeeService.findByCode(employeeCode);
			account = applicationBean.getAccount();
			try {
				departmentParent = employee.getDepartment().getDepartmentParent();
			} catch (Exception e) {
			}

			if (account.isAdmin()) {
				departmentParentSearchs = departmentParentService.findAll();
				if (departmentParentSearchs.size() != 0)
					departmentParentSearch = departmentParentSearchs.get(0);
				departmentParents = departmentParentSearchs;
				ajaxSelectDep();
			}

			else if (employee.equals(departmentParent.getEmployee())) {
				manager = true;
				departmentParentSearchs = new ArrayList<DepartmentParent>();
				departmentParentSearch = employee.getDepartment().getDepartmentParent();
				departmentParentSearchs.add(departmentParentSearch);
				ajaxSelectDep();

				departmentParents = new ArrayList<DepartmentParent>();
				departmentParents.add(departmentParent);
			} else {
				departmentParentSearchs = new ArrayList<DepartmentParent>();
				departmentParentSearch = employee.getDepartment().getDepartmentParent();
				departmentParentSearchs.add(departmentParentSearch);

				departmentParents = new ArrayList<DepartmentParent>();
				departmentParents.add(departmentParent);

				employeeSearch = employee;
				employees = new ArrayList<Employee>();
				employees.add(employee);
				isEmp = true;
			}
			kPIPerson.setEmployee(employee);
			ajaxdepartmentSearch();
		} catch (Exception e) {
		}
	}

	@Inject
	DepartmentService departmentService;

	public void ajaxdepartmentSearch() {
		if (departmentParentSearch != null) {
			departmentSearchs = departmentService.findDepartment(departmentParentSearch);
			departmentSearch = null;

		}
	}

	public void showEdit() {

		kpiPersonOfMonthRemoves.clear();
		kpiPersonOfMonthAdds.clear();
		kpiPersonOfMonths.clear();
		if (kPIPersonEdit != null && kPIPersonEdit.getId() != null) {
			KPIPerson od = kPIPersonService.findByIdAll(kPIPersonEdit.getId());
			if (od != null) {
				kPIPerson = od;
				departmentParent = kPIPerson.getEmployee().getDepartment().getDepartmentParent();
				if (account.isAdmin() || employee.equals(departmentParent.getEmployee())) {
					ajaxSelectDep();
				}

				for (int i = 0; i < od.getKpiPersonOfMonths().size(); i++) {
					if (od.getKpiPersonOfMonths().get(i).isBehaviour()) {
						kpiPersonOfMonthAdds.add(od.getKpiPersonOfMonths().get(i));
					} else {
						kpiPersonOfMonths.add(od.getKpiPersonOfMonths().get(i));
					}
				}
				for (int i = 0; i < kpiPersonOfMonthAdds.size(); i++) {
					kpiPersonOfMonthAdds.get(i).setNo(i + 1);
				}
				// for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
				// kpiPersonOfMonths.get(i).setNo(i + 1);
				// }
				for (int i = 0; i < kpiPersonOfMonths.size(); i++) {
					kpiPersonOfMonths.get(i).setIndex(i + 1);
				}
			}
		}

	}

	public void delete() {
		notify = new Notify(FacesContext.getCurrentInstance());
		if (kPIPerson != null && kPIPerson.getId() != null) {
			kPIPerson = kPIPersonService.findByIdAll(kPIPerson.getId());
			if (kPIPerson.isSignKPI()) {
				notify.warning("Phiếu này đã duyệt không xóa được.");
			} else {
				Date date = new Date(kPIPerson.getKyear(), kPIPerson.getKmonth(), 1);
				if (allowDelete(date)) {
					boolean result = kPIPersonService.delete(kPIPerson);
					if (result) {
						kPIPersons.remove(kPIPerson);
						writeLogInfo("Xoa " + kPIPerson.toString());
						reset();
						notify.success();
					} else {
						notify.warning("Không xoá được!");
					}
				} else {
					notify.warningDetail();
				}
			}
		} else {
			notify.warning("Chưa chọn phiếu!");
		}
	}

	public void searchItem() {
		List<Employee> employees = new ArrayList<Employee>();
		Employee employeeAccount = null;
		try {
			String employeeCode = applicationBean.getAccount().getMember().getCode();
			employeeAccount = employeeService.findByCode(employeeCode);
			if (employeeAccount != null) {
				DepartmentParent departmentParent = employeeAccount.getDepartment().getDepartmentParent();
				if (applicationBean.getAccount().isAdmin()) {
					employeeAccount = null;
				} else if (employeeAccount.equals(departmentParent.getEmployee())) {
					employees = employeeService.findByDepp(departmentParent);
				} else {
					employees.add(employeeAccount);
				}
			}
			kPIPersons = kPIPersonService.findRange(employees, departmentParentSearch, positionJobSearch,
					employeeSearch, monthSearch, yearSearch, departmentSearch);
		} catch (Exception e) {

		}

	}

	public void eventSelect() {
		if (kPIPersons != null)
			for (int i = 0; i < kPIPersons.size(); i++) {
				kPIPersons.get(i).setSelect(select);
			}
	}

	public List<KPIPerson> getKpiPersons() {
		return kPIPersons;
	}

	public void setKpiPersons(List<KPIPerson> kpiPersons) {
		this.kPIPersons = kpiPersons;
	}

	public KPIPerson getkPIPerson() {
		return kPIPerson;
	}

	public void setkPIPerson(KPIPerson kPIPerson) {
		this.kPIPerson = kPIPerson;
	}

	public KPIPerson getkPIPersonEdit() {
		return kPIPersonEdit;
	}

	public void setkPIPersonEdit(KPIPerson kPIPersonEdit) {
		this.kPIPersonEdit = kPIPersonEdit;
	}

	public DepartmentParent getDepartment() {
		return departmentParent;
	}

	public void setDepartment(DepartmentParent department) {
		this.departmentParent = department;
	}

	public PositionJob getPositionJobSearch() {
		return positionJobSearch;
	}

	public void setPositionJobSearch(PositionJob positionJobSearch) {
		this.positionJobSearch = positionJobSearch;
	}

	public List<DepartmentParent> getDepartments() {
		return departmentParents;
	}

	public void setDepartments(List<DepartmentParent> departments) {
		this.departmentParents = departments;
	}

	public List<Boolean> getList() {
		return list;
	}

	public void setList(List<Boolean> list) {
		this.list = list;
	}

	public DepartmentParent getDepartmentParentSearch() {
		return departmentParentSearch;
	}

	public void setDepartmentParentSearch(DepartmentParent departmentParentSearch) {
		this.departmentParentSearch = departmentParentSearch;
	}

	public List<DepartmentParent> getDepartmentParentSearchs() {
		return departmentParentSearchs;
	}

	public void setDepartmentParentSearchs(List<DepartmentParent> departmentParentSearchs) {
		this.departmentParentSearchs = departmentParentSearchs;
	}

	public List<Employee> getEmployees() {
		return employees;
	}

	public void setEmployees(List<Employee> employees) {
		this.employees = employees;
	}

	public Employee getEmployeeSearch() {
		return employeeSearch;
	}

	public void setEmployeeSearch(Employee employeeSearch) {
		this.employeeSearch = employeeSearch;
	}

	public List<KPIPerson> getkPIPersons() {
		return kPIPersons;
	}

	public void setkPIPersons(List<KPIPerson> kPIPersons) {
		this.kPIPersons = kPIPersons;
	}

	public List<OrientationPerson> getOrientationPersons() {
		return orientationPersons;
	}

	public void setOrientationPersons(List<OrientationPerson> orientationPersons) {
		this.orientationPersons = orientationPersons;
	}

	public List<KPIPersonOfMonth> getKpiPersonOfMonths() {
		return kpiPersonOfMonths;
	}

	public void setKpiPersonOfMonths(List<KPIPersonOfMonth> kpiPersonOfMonths) {
		this.kpiPersonOfMonths = kpiPersonOfMonths;
	}

	public List<KPIPersonOfMonth> getKpiPersonOfMonthAdds() {
		return kpiPersonOfMonthAdds;
	}

	public void setKpiPersonOfMonthAdds(List<KPIPersonOfMonth> kpiPersonOfMonthAdds) {
		this.kpiPersonOfMonthAdds = kpiPersonOfMonthAdds;
	}

	public int getMonthSearch() {
		return monthSearch;
	}

	public void setMonthSearch(int monthSearch) {
		this.monthSearch = monthSearch;
	}

	public int getYearSearch() {
		return yearSearch;
	}

	public void setYearSearch(int yearSearch) {
		this.yearSearch = yearSearch;
	}

	public int getMonthCopy() {
		return monthCopy;
	}

	public void setMonthCopy(int monthCopy) {
		this.monthCopy = monthCopy;
	}

	public int getYearCopy() {
		return yearCopy;
	}

	public void setYearCopy(int yearCopy) {
		this.yearCopy = yearCopy;
	}

	public boolean isSelect() {
		return select;
	}

	public void setSelect(boolean select) {
		this.select = select;
	}

	public int getTabindex() {
		return tabindex;
	}

	public void setTabindex(int tabindex) {
		this.tabindex = tabindex;
	}

	public List<BehaviourPerson> getBehaviourPersons() {
		return behaviourPersons;
	}

	public void setBehaviourPersons(List<BehaviourPerson> behaviourPersons) {
		this.behaviourPersons = behaviourPersons;
	}

	public List<FormulaKPI> getFormulaKPIs() {
		return formulaKPIs;
	}

	public void setFormulaKPIs(List<FormulaKPI> formulaKPIs) {
		this.formulaKPIs = formulaKPIs;
	}

	public FormulaKPI getFormulaKPISelect() {
		return formulaKPISelect;
	}

	public void setFormulaKPISelect(FormulaKPI formulaKPISelect) {
		this.formulaKPISelect = formulaKPISelect;
	}

	public PositionJob getPositionJobSelect() {
		return positionJobSelect;
	}

	public void setPositionJobSelect(PositionJob positionJobSelect) {
		this.positionJobSelect = positionJobSelect;
	}

	public List<PositionJob> getPositionJobs() {
		return positionJobs;
	}

	public void setPositionJobs(List<PositionJob> positionJobs) {
		this.positionJobs = positionJobs;
	}

	public List<KPIDepOfMonth> getKpiDepOfMonths() {
		return kpiDepOfMonths;
	}

	public void setKpiDepOfMonths(List<KPIDepOfMonth> kpiDepOfMonths) {
		this.kpiDepOfMonths = kpiDepOfMonths;
	}

	public boolean isEmp() {
		return isEmp;
	}

	public void setEmp(boolean isEmp) {
		this.isEmp = isEmp;
	}

	public List<KPIPerson> getkPIPersonFilters() {
		return kPIPersonFilters;
	}

	public void setkPIPersonFilters(List<KPIPerson> kPIPersonFilters) {
		this.kPIPersonFilters = kPIPersonFilters;
	}

	public Department getDepartmentSearch() {
		return departmentSearch;
	}

	public void setDepartmentSearch(Department departmentSearch) {
		this.departmentSearch = departmentSearch;
	}

	public List<Department> getDepartmentSearchs() {
		return departmentSearchs;
	}

	public void setDepartmentSearchs(List<Department> departmentSearchs) {
		this.departmentSearchs = departmentSearchs;
	}

	public KPIPersonOfMonth getKpm() {
		return kpm;
	}

	public void setKpm(KPIPersonOfMonth kpm) {
		this.kpm = kpm;
	}

	public StreamedContent getStreamedContent() {
		return streamedContent;
	}

	public void setStreamedContent(StreamedContent streamedContent) {
		this.streamedContent = streamedContent;
	}

	public boolean isOrverideData() {
		return orverideData;
	}

	public void setOrverideData(boolean orverideData) {
		this.orverideData = orverideData;
	}

}
